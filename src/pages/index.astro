---
import Layout from '../layouts/Layout.astro';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { ThemeToggle } from '../components/ThemeToggle';
import { PWAInstallButton } from '../components/PWAInstallButton';
import { getAllBlogPosts } from '../lib/blog-posts';
import { getConfig } from '../lib/config';

const config = getConfig();
const allPosts = getAllBlogPosts();
const topics = [...new Set(allPosts.map(post => post.topic))];
---

<Layout
  title="Blog"
  description={`Insights on ${topics.join(', ')} and more`}
>
  <div class="flex-1 relative">
    <!-- Background Layers - Optimized for performance -->
    <div class="fixed inset-0 -z-10 pointer-events-none">
      <!-- Solid background base -->
      <div class="absolute inset-0 bg-background"></div>

      <!-- Simple Gradient Overlay -->
      <div class="absolute inset-0 bg-gradient-to-b from-primary/5 via-background to-background"></div>

      <!-- Reduced Gradient Orbs - Only 3 for better performance -->
      <div class="absolute inset-0 will-change-transform">
        <!-- Top left - Primary color -->
        <div class="absolute top-0 -left-4 w-[600px] h-[600px] bg-primary/20 rounded-full mix-blend-multiply dark:mix-blend-normal opacity-50 dark:opacity-20 animate-blob-slow"></div>

        <!-- Top right - Purple -->
        <div class="absolute top-0 -right-4 w-[500px] h-[500px] bg-purple-400/20 dark:bg-purple-500/15 rounded-full mix-blend-multiply dark:mix-blend-normal opacity-50 dark:opacity-15 animate-blob-slow animation-delay-3000"></div>

        <!-- Bottom center - Blue -->
        <div class="absolute bottom-0 left-1/2 -translate-x-1/2 w-[500px] h-[500px] bg-blue-400/20 dark:bg-blue-500/15 rounded-full mix-blend-multiply dark:mix-blend-normal opacity-50 dark:opacity-15 animate-blob-slow animation-delay-6000"></div>
      </div>
    </div>

    <!-- Sticky Top Bar - Solid background for better scroll performance -->
    <header class="sticky top-0 z-50 bg-background border-b border-border/50 shadow-sm">
      <div class="container mx-auto px-3 md:px-4 max-w-4xl">
        <div class="flex justify-between items-center py-4">
          <!-- Logo -->
          <a href="/" class="flex items-center gap-3">
            <img src="/logo.svg" alt={config.app.name} class="h-8 w-8" />
            <span class="font-bold text-lg text-foreground hidden md:inline">{config.app.shortName}</span>
          </a>

          <!-- RSS, PWA Install, and Theme Toggle -->
          <div class="flex items-center gap-3">
            <a
              href="/rss.xml"
              class="inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-border/50 bg-card hover:bg-card/80 transition-colors text-sm font-medium"
              target="_blank"
              rel="noopener noreferrer"
              title="Subscribe via RSS"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4 text-orange-500">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 5c7.18 0 13 5.82 13 13M6 11a7 7 0 017 7m-6 0a1 1 0 11-2 0 1 1 0 012 0z" />
              </svg>
              <span class="hidden sm:inline">RSS</span>
            </a>
            <PWAInstallButton client:load />
            <ThemeToggle client:load />
          </div>
        </div>
      </div>
    </header>

    <div class="container mx-auto px-3 md:px-4 py-8 md:py-12 max-w-4xl relative z-10">
      <!-- Header -->
      <header class="mb-12 md:mb-16">

        <!-- Logo and Title Layout - Centered -->
        <div class="flex flex-col items-center gap-6 text-center">
          <!-- Logo -->
          <div>
            <img src="/logo.svg" alt={config.app.name} class="h-24 w-24" />
          </div>

          <!-- Title and Description -->
          <div>
            <h1 class="text-5xl font-bold mb-4 text-foreground">
              {config.app.name}
            </h1>
            <p class="text-xl text-foreground/60 dark:text-muted-foreground">{config.app.description}</p>
          </div>
        </div>
      </header>

      <!-- Search Bar with Glow -->
      <div class="max-w-2xl mx-auto mb-6 md:mb-8">
        <div class="relative group">
          <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground group-focus-within:text-primary transition-colors z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <input
            type="text"
            id="search-input"
            placeholder="Search blog posts..."
            class="w-full pl-12 pr-4 py-3 rounded-lg border bg-card text-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all shadow-sm focus:shadow-lg focus:shadow-primary/20"
          />
        </div>
      </div>

      <!-- Topic Filter -->
      <div class="flex flex-wrap justify-center gap-2 md:gap-3 mb-8 md:mb-12">
        <button class="filter-btn active px-6 py-2.5 rounded-lg border-2 border-transparent bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold text-sm transition-all hover:from-primary/90 hover:to-primary/70 hover:-translate-y-0.5 hover:shadow-lg" data-topic="all">
          All
        </button>
        {topics.map((topic) => (
          <button class="filter-btn px-6 py-2.5 rounded-lg border-2 border-border/50 bg-card text-foreground font-semibold text-sm transition-all hover:border-primary hover:bg-primary/5 hover:-translate-y-0.5 hover:shadow-md capitalize" data-topic={topic}>
            {topic}
          </button>
        ))}
      </div>

      <!-- Blog Posts Grid -->
      <div class="grid md:grid-cols-2 gap-4 md:gap-6 mb-12 py-4" id="posts-grid">
        {allPosts.map((post) => {
          const formattedDate = post.date.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric',
          });

          return (
            <article
              class="post-card group"
              data-topic={post.topic}
              data-search-content={`${post.title.toLowerCase()} ${post.description.toLowerCase()} ${post.author.toLowerCase()} ${post.topic.toLowerCase()} ${post.tags.join(' ').toLowerCase()}`}
            >
              <a href={`/blog/${post.slug}`} class="block h-full">
                <Card className="h-full transition-all hover:shadow-2xl hover:shadow-primary/10 hover:-translate-y-2 hover:border-primary/50">
                  <CardContent className="pt-6">
                    <div class="flex items-center gap-2 mb-3">
                      <Badge className="capitalize">{post.topic}</Badge>
                    </div>
                    <h2 class="text-xl font-bold mb-2 text-foreground group-hover:text-primary transition-colors">
                      {post.title}
                    </h2>
                    <p class="text-sm text-muted-foreground mb-3">
                      {post.description}
                    </p>
                    <div class="flex flex-wrap gap-1.5 mb-3">
                      {post.tags.slice(0, 3).map((tag) => (
                        <Badge variant="secondary" className="text-xs">
                          #{tag}
                        </Badge>
                      ))}
                    </div>
                    <div class="flex items-center gap-2 text-xs text-muted-foreground pt-4 border-t">
                      <span class="font-semibold text-foreground">{post.author}</span>
                      <span>â€¢</span>
                      <time datetime={post.date.toISOString()}>{formattedDate}</time>
                    </div>
                  </CardContent>
                </Card>
              </a>
            </article>
          );
        })}
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-16">
        <svg class="w-16 h-16 mx-auto mb-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="text-2xl font-bold mb-2 text-foreground">No posts found</h3>
        <p class="text-muted-foreground">Try adjusting your search or filter</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  import FlexSearch from 'flexsearch';

  // Search and filter functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const filterBtns = document.querySelectorAll('.filter-btn');
  const postCards = document.querySelectorAll('.post-card');
  const noResults = document.getElementById('no-results');

  let currentTopic = 'all';
  let currentSearch = '';
  let searchIndex: any = null;
  let searchDocuments: any[] = [];

  // Load search documents and build FlexSearch index
  async function loadSearchIndex() {
    try {
      const response = await fetch('/search-index.json');
      const data = await response.json();
      searchDocuments = data.documents;

      // Build FlexSearch Document index with prefix matching and fuzzy search
      searchIndex = new FlexSearch.Document({
        id: 'slug',
        tokenize: 'forward',
        optimize: true,
        resolution: 9,
        context: {
          depth: 2,
          bidirectional: true,
        },
        index: [
          {
            field: 'title',
            tokenize: 'forward',
            optimize: true,
            resolution: 9,
          },
          {
            field: 'description',
            tokenize: 'forward',
            resolution: 5,
          },
          {
            field: 'tags',
            tokenize: 'forward',
            resolution: 7,
          },
          {
            field: 'topic',
            tokenize: 'forward',
            resolution: 3,
          },
          {
            field: 'author',
            tokenize: 'forward',
            resolution: 1,
          },
        ],
      });

      // Add documents to index
      searchDocuments.forEach((doc) => {
        searchIndex.add({
          slug: doc.slug,
          title: doc.title,
          description: doc.description,
          tags: doc.tags.join(' '),
          topic: doc.topic,
          author: doc.author,
        });
      });
    } catch (error) {
      console.error('Failed to load search index:', error);
    }
  }

  // Initialize search index
  loadSearchIndex();

  function filterPosts() {
    let visibleCount = 0;
    let matchingSlugs = new Set<string>();

    // If there's a search query and index is loaded, use FlexSearch
    if (currentSearch && searchIndex) {
      try {
        // Search with fuzzy matching options
        const results = searchIndex.search(currentSearch, {
          limit: 100,
          suggest: true, // Enable fuzzy matching
        });

        // FlexSearch Document returns array of field results
        // Each field result has: { field: "fieldName", result: ["id1", "id2"] }
        results.forEach((fieldResult: any) => {
          if (fieldResult.result) {
            fieldResult.result.forEach((id: string) => {
              matchingSlugs.add(id);
            });
          }
        });
      } catch (e) {
        console.error('Search error:', e);
      }
    }

    postCards.forEach((card) => {
      const cardElement = card as HTMLElement;
      const topic = cardElement.dataset.topic;
      const slug = cardElement.querySelector('a')?.getAttribute('href')?.split('/').pop();

      const matchesTopic = currentTopic === 'all' || topic === currentTopic;
      const matchesSearch = !currentSearch || matchingSlugs.has(slug || '');

      if (matchesTopic && matchesSearch) {
        cardElement.style.display = 'block';
        visibleCount++;
      } else {
        cardElement.style.display = 'none';
      }
    });

    if (noResults) {
      noResults.style.display = visibleCount === 0 ? 'block' : 'none';
    }
  }

  // Search input handler - no debounce, FlexSearch is fast enough
  searchInput?.addEventListener('input', (e) => {
    currentSearch = (e.target as HTMLInputElement).value;
    filterPosts();
  });

  // Topic filter handler
  filterBtns.forEach((btn) => {
    btn.addEventListener('click', () => {
      filterBtns.forEach((b) => {
        // Remove active gradient styles
        b.classList.remove('active', 'border-transparent', 'bg-gradient-to-r', 'from-primary', 'to-primary/80', 'text-primary-foreground', 'hover:from-primary/90', 'hover:to-primary/70', 'hover:shadow-lg');
        // Add inactive styles
        b.classList.add('border-border/50', 'bg-card', 'text-foreground', 'hover:bg-primary/5', 'hover:shadow-md');
      });
      // Remove inactive styles
      btn.classList.remove('border-border/50', 'bg-card', 'text-foreground', 'hover:bg-primary/5', 'hover:shadow-md');
      // Add active gradient styles
      btn.classList.add('active', 'border-transparent', 'bg-gradient-to-r', 'from-primary', 'to-primary/80', 'text-primary-foreground', 'hover:from-primary/90', 'hover:to-primary/70', 'hover:shadow-lg');
      currentTopic = btn.getAttribute('data-topic') || 'all';
      filterPosts();
    });
  });
</script>

<style>
  /* Mesh gradient colors - Light mode */
  .mesh-stop-1 {
    stop-color: rgb(139, 92, 246);
    stop-opacity: 0.25;
  }
  .mesh-stop-2 {
    stop-color: rgb(236, 72, 153);
    stop-opacity: 0.2;
  }
  .mesh-stop-3 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.25;
  }
  .mesh-stop-4 {
    stop-color: rgb(16, 185, 129);
    stop-opacity: 0.2;
  }
  .mesh-stop-5 {
    stop-color: rgb(251, 146, 60);
    stop-opacity: 0.25;
  }
  .mesh-stop-6 {
    stop-color: rgb(168, 85, 247);
    stop-opacity: 0.15;
  }
  .mesh-stop-7 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.05;
  }
  .mesh-stop-top-1 {
    stop-color: rgb(168, 85, 247);
    stop-opacity: 0.35;
  }
  .mesh-stop-top-2 {
    stop-color: rgb(236, 72, 153);
    stop-opacity: 0.25;
  }
  .mesh-stop-top-3 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.1;
  }

  /* Mesh gradient colors - Dark mode */
  .dark .mesh-stop-1 {
    stop-color: rgb(139, 92, 246);
    stop-opacity: 0.2;
  }
  .dark .mesh-stop-2 {
    stop-color: rgb(236, 72, 153);
    stop-opacity: 0.15;
  }
  .dark .mesh-stop-3 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.2;
  }
  .dark .mesh-stop-4 {
    stop-color: rgb(16, 185, 129);
    stop-opacity: 0.15;
  }
  .dark .mesh-stop-5 {
    stop-color: rgb(251, 146, 60);
    stop-opacity: 0.2;
  }
  .dark .mesh-stop-6 {
    stop-color: rgb(168, 85, 247);
    stop-opacity: 0.12;
  }
  .dark .mesh-stop-7 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.03;
  }
  .dark .mesh-stop-top-1 {
    stop-color: rgb(168, 85, 247);
    stop-opacity: 0.25;
  }
  .dark .mesh-stop-top-2 {
    stop-color: rgb(236, 72, 153);
    stop-opacity: 0.18;
  }
  .dark .mesh-stop-top-3 {
    stop-color: rgb(59, 130, 246);
    stop-opacity: 0.08;
  }

  .mesh-noise-rect {
    fill: #000000;
  }

  .dark .mesh-noise-rect {
    fill: #ffffff;
    opacity: 0.02;
  }

  @keyframes blob-slow {
    0% {
      transform: translate(0px, 0px) scale(1);
    }
    33% {
      transform: translate(20px, -30px) scale(1.05);
    }
    66% {
      transform: translate(-15px, 15px) scale(0.95);
    }
    100% {
      transform: translate(0px, 0px) scale(1);
    }
  }

  .animate-blob-slow {
    animation: blob-slow 12s ease-in-out infinite;
  }

  .animation-delay-1000 {
    animation-delay: 1s;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }

  .animation-delay-3000 {
    animation-delay: 3s;
  }

  .animation-delay-4000 {
    animation-delay: 4s;
  }

  .animation-delay-5000 {
    animation-delay: 5s;
  }

  .animation-delay-6000 {
    animation-delay: 6s;
  }

  .animation-delay-7000 {
    animation-delay: 7s;
  }

  .animation-delay-8000 {
    animation-delay: 8s;
  }

  .animation-delay-9000 {
    animation-delay: 9s;
  }

  .animation-delay-10000 {
    animation-delay: 10s;
  }

  /* Performance optimizations */
  #posts-grid {
    contain: layout style;
  }

  .post-card {
    contain: layout;
    will-change: transform;
  }

  /* Force GPU acceleration for background */
  .animate-blob-slow {
    transform: translateZ(0);
  }
</style>
