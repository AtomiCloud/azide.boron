---
import BlogPostLayout from '../../layouts/BlogPostLayout.astro';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { getBlogPost } from '../../lib/blog-posts';

// Export frontmatter for auto-discovery
export const frontmatter = {
  title: 'Building Scalable Microservices with Kubernetes',
  description: 'A practical guide to container orchestration',
  author: 'Sarah Chen',
  date: '2025-01-24',
  topic: 'tech' as const,
  tags: ['kubernetes', 'docker', 'devops', 'cloud', 'microservices'],
};

const post = getBlogPost('kubernetes-microservices')!;
---

<BlogPostLayout post={post}>
  <!-- Custom HTML/CSS content with shadcn components -->

  <p class="text-lg">
    Kubernetes has revolutionized how we deploy and manage containerized applications.
    In this guide, we'll explore the key concepts and best practices for building scalable microservices architectures.
  </p>

  <h2 class="text-3xl font-bold mt-12 mb-6">Why Kubernetes?</h2>

  <div class="grid md:grid-cols-2 gap-6 my-8">
    <Card client:load>
      <CardHeader>
        <CardTitle className="text-xl">Automated Orchestration</CardTitle>
        <CardDescription>Let Kubernetes handle the heavy lifting</CardDescription>
      </CardHeader>
      <CardContent>
        <p class="text-sm text-muted-foreground">
          Automatically schedule containers, manage load balancing, and handle failover without manual intervention.
        </p>
      </CardContent>
    </Card>

    <Card client:load>
      <CardHeader>
        <CardTitle className="text-xl">Self-Healing</CardTitle>
        <CardDescription>Built-in resilience and recovery</CardDescription>
      </CardHeader>
      <CardContent>
        <p class="text-sm text-muted-foreground">
          Automatically restart failed containers, replace and reschedule when nodes die, and kill containers that don't respond.
        </p>
      </CardContent>
    </Card>

    <Card client:load>
      <CardHeader>
        <CardTitle className="text-xl">Horizontal Scaling</CardTitle>
        <CardDescription>Scale with demand</CardDescription>
      </CardHeader>
      <CardContent>
        <p class="text-sm text-muted-foreground">
          Scale your application up and down with a simple command, or automatically based on CPU usage.
        </p>
      </CardContent>
    </Card>

    <Card client:load>
      <CardHeader>
        <CardTitle className="text-xl">Service Discovery</CardTitle>
        <CardDescription>Find and connect services easily</CardDescription>
      </CardHeader>
      <CardContent>
        <p class="text-sm text-muted-foreground">
          Kubernetes gives containers their own IP addresses and a single DNS name for a set of containers.
        </p>
      </CardContent>
    </Card>
  </div>

  <h2 class="text-3xl font-bold mt-12 mb-6">Getting Started</h2>

  <p class="mb-4">
    First, let's set up a basic deployment. Here's how to create a simple Kubernetes deployment:
  </p>

  <div class="bg-muted rounded-lg p-6 my-6">
    <pre class="text-sm overflow-x-auto"><code>{`apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: my-app:1.0.0
        ports:
        - containerPort: 8080`}</code></pre>
  </div>

  <h2 class="text-3xl font-bold mt-12 mb-6">Key Concepts</h2>

  <ul class="space-y-4 my-6">
    <li class="flex items-start">
      <span class="text-primary mr-2">•</span>
      <div>
        <strong>Pods:</strong> The smallest deployable units that can contain one or more containers
      </div>
    </li>
    <li class="flex items-start">
      <span class="text-primary mr-2">•</span>
      <div>
        <strong>Services:</strong> Expose your pods to network traffic
      </div>
    </li>
    <li class="flex items-start">
      <span class="text-primary mr-2">•</span>
      <div>
        <strong>Deployments:</strong> Declaratively manage your pods and ReplicaSets
      </div>
    </li>
    <li class="flex items-start">
      <span class="text-primary mr-2">•</span>
      <div>
        <strong>ConfigMaps & Secrets:</strong> Manage configuration and sensitive data
      </div>
    </li>
  </ul>

  <div class="bg-primary/10 border-l-4 border-primary rounded-r-lg p-6 my-8">
    <p class="font-semibold mb-2">Pro Tip:</p>
    <p class="text-sm">
      Always use resource limits and requests to ensure your applications have the resources they need and don't monopolize cluster resources.
    </p>
  </div>

  <h2 class="text-3xl font-bold mt-12 mb-6">Next Steps</h2>

  <p class="mb-6">
    Ready to dive deeper? Here are some resources to continue your Kubernetes journey:
  </p>

  <div class="flex flex-wrap gap-4">
    <Button client:load variant="default">Official Documentation</Button>
    <Button client:load variant="outline">Interactive Tutorial</Button>
    <Button client:load variant="secondary">Community Forum</Button>
  </div>

</BlogPostLayout>
